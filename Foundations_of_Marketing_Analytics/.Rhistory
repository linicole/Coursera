, 'cbb_cbb_nonscorable_reason_binned_3_m4' , 'approval_amount_woe_m4', 'leads_3mnf_score')
mytrain_model <- mytrain_model[,model_vars]
mytest_model <- mytest_model[,model_vars]
names(mytest_model)
names(mytrain_model)[2:8] <- paste('model', names(mytrain_model)[2:8], sep = '__')
names(mytest_model)[2:8] <- paste('model', names(mytest_model)[2:8], sep = '__')
mytrain_final <- mytrain_output %>% left_join(mytrain_model, by='loan_id') # 32508    16
mytest_final <- mytest_output %>% left_join(mytest_model, by='loan_id') # 13929    16
names(mytrain_final)
mytrain_output <- mytrain[,c('loan_id','customer_id', raw_variables, 'three_month_net_fees')] %>%
inner_join(profit_score_train[,c('loan_id','leads_profit_score')])
mytest_output <- mytest[,c('loan_id','customer_id', raw_variables, 'three_month_net_fees')] %>%
inner_join(profit_score_test[,c('loan_id','leads_profit_score')])
mytrain_model <- sqldf("select loan_id, leads_profit_score, approval_amount
, (leads_profit_score * approval_amount) as approval_amount_x_leads_profit_score
, case when state = 'FL' then 1 else 0 end as State_FL
, case when csidf_score is null then 0.1175439
when csidf_score < 592.5 then -0.3221108
when csidf_score >= 592.5 and csidf_score < 745.5 then -0.126181
when csidf_score >= 745.5 and csidf_score < 841.5 then 0.1795302
when csidf_score >= 841.5 then 0.5634244
end as csidf_score_woe_m4
, case when cbb_days_since_first_seen_by_clarity_account_3 is null then 0.05219879
when cbb_days_since_first_seen_by_clarity_account_3 < 1270 then -0.43235159
when cbb_days_since_first_seen_by_clarity_account_3 >= 1270 and cbb_days_since_first_seen_by_clarity_account_3 < 1710 then -0.21269208
when cbb_days_since_first_seen_by_clarity_account_3 >= 1710 then 0.07338614
end as cbb_days_since_first_seen_by_clarity_account_3_woe_m4
, case when approval_amount is null then -0.03223889
when approval_amount < 155 then -0.87618927
when approval_amount >= 155 and approval_amount < 220 then -0.39752088
when approval_amount >= 220 and approval_amount < 272.5 then -0.03223889
when approval_amount >= 272.5 and approval_amount < 387.5 then 0.42999577
when approval_amount >= 387.5 then 0.66194086
end as approval_amount_woe_m4
, case when cbb_cbb_nonscorable_reason in ('other','X.08..State.legislation.requires.match.on.more.identification.information') then 1 else 0
end as cbb_cbb_nonscorable_reason_binned_3_m4
from mytrain_output;")
mytest_model <- sqldf("select loan_id, leads_profit_score, approval_amount
, (leads_profit_score * approval_amount) as approval_amount_x_leads_profit_score
, case when state = 'FL' then 1 else 0 end as State_FL
, case when csidf_score is null then 0.1175439
when csidf_score < 592.5 then -0.3221108
when csidf_score >= 592.5 and csidf_score < 745.5 then -0.126181
when csidf_score >= 745.5 and csidf_score < 841.5 then 0.1795302
when csidf_score >= 841.5 then 0.5634244
end as csidf_score_woe_m4
, case when cbb_days_since_first_seen_by_clarity_account_3 is null then 0.05219879
when cbb_days_since_first_seen_by_clarity_account_3 < 1270 then -0.43235159
when cbb_days_since_first_seen_by_clarity_account_3 >= 1270 and cbb_days_since_first_seen_by_clarity_account_3 < 1710 then -0.21269208
when cbb_days_since_first_seen_by_clarity_account_3 >= 1710 then 0.07338614
end as cbb_days_since_first_seen_by_clarity_account_3_woe_m4
, case when approval_amount is null then -0.03223889
when approval_amount < 155 then -0.87618927
when approval_amount >= 155 and approval_amount < 220 then -0.39752088
when approval_amount >= 220 and approval_amount < 272.5 then -0.03223889
when approval_amount >= 272.5 and approval_amount < 387.5 then 0.42999577
when approval_amount >= 387.5 then 0.66194086
end as approval_amount_woe_m4
, case when cbb_cbb_nonscorable_reason in ('other','X.08..State.legislation.requires.match.on.more.identification.information') then 1 else 0
end as cbb_cbb_nonscorable_reason_binned_3_m4
from mytest_output;")
leads_3mnf_fillna <- function(mydata) {
mydata[which(is.na(mydata[,'approval_amount'])),'approval_amount'] <- 250
mydata
}
leads_3mnf <- function(mydata) {
with(mydata,
9.40948  +
approval_amount * leads_profit_score * 1.19577    +
State_FL                             *  -20.87551  +
csidf_score_woe_m4                   *  50.73254   +
cbb_days_since_first_seen_by_clarity_account_3_woe_m4  *  29.89094   +
cbb_cbb_nonscorable_reason_binned_3_m4                 *  39.97321   +
approval_amount_woe_m4                                 *  -12.68652
)
}
mytrain_model <- leads_3mnf_fillna(mytrain_model)
mytest_model <- leads_3mnf_fillna(mytest_model)
mytrain_model$leads_3mnf_score <- leads_3mnf(mytrain_model)
mytest_model$leads_3mnf_score <- leads_3mnf(mytest_model)
model_vars <- c('loan_id', 'approval_amount_x_leads_profit_score', 'State_FL'
, 'csidf_score_woe_m4', 'cbb_days_since_first_seen_by_clarity_account_3_woe_m4'
, 'cbb_cbb_nonscorable_reason_binned_3_m4' , 'approval_amount_woe_m4', 'leads_3mnf_score')
mytrain_model <- mytrain_model[,model_vars]
mytest_model <- mytest_model[,model_vars]
names(mytrain_model)[2:7] <- paste('model', names(mytrain_model)[2:7], sep = '__')
names(mytest_model)[2:7] <- paste('model', names(mytest_model)[2:7], sep = '__')
names(mytrain_model)
mytrain_final <- mytrain_output %>% left_join(mytrain_model, by='loan_id') # 32508    16
mytest_final <- mytest_output %>% left_join(mytest_model, by='loan_id') # 13929    16
names(mytrain_final)
mytrain_final <- mytrain_final[, c(1:7, 9:15, 8, 16)] # 32508    16
mytest_final <- mytest_final[, c(1:7, 9:15, 8, 16)] # 13929    16
names(mytrain_final)
write.csv(mytrain_final, '/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/3monthNetFee/Model Governance Data/leads_3mnf_data_train_mg.csv', row.names = F)
write.csv(mytest_final, '/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/3monthNetFee/Model Governance Data/leads_3mnf_data_test_mg.csv', row.names = F)
dim(mytrain_final)
dim(mytest_final)
library(dplyr)
library(sqldf)
mytrain <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Organic Long Term Model/12monthNetFee/Training Dataset/m14_org_12mnf_data_train.csv')
mytest <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Organic Long Term Model/12monthNetFee/Validation Dataset/m14_org_12mnf_data_test.csv')
nf_6m_train <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Organic Long Term Model/6monthNetFee/Model Governance Data/org_6mnf_data_train_mg.csv')
nf_6m_test <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Organic Long Term Model/6monthNetFee/Model Governance Data/org_6mnf_data_test_mg.csv')
library(dplyr)
library(sqldf)
mytrain <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/6monthNetFee/Training Dataset/m5_lead_6mnf_data_train.csv') # 26126   729
mytest <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/6monthNetFee/Validation Dataset/m5_lead_6mnf_data_test.csv') # 11259   729
nf_3m_train <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/3monthNetFee/Model Governance Data/leads_3mnf_data_train_mg.csv') # 32508    16
nf_3m_test <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/3monthNetFee/Model Governance Data/leads_3mnf_data_test_mg.csv') # 13929    16
raw_variables <- c('approval_amount',
'state',
'paychecks_per_year')
mytrain_output <- mytrain[,c('loan_id','customer_id', raw_variables, 'six_month_net_fees')] %>%
inner_join(nf_3m_train[,c('loan_id','leads_3mnf_score')])
mytest_output <- mytest[,c('loan_id','customer_id', raw_variables, 'six_month_net_fees')] %>%
inner_join(nf_3m_test[,c('loan_id','leads_3mnf_score')])
mytrain_model <- sqldf("select loan_id, leads_3mnf_score, approval_amount
, case when paychecks_per_year > 25 and paychecks_per_year <= 39 then 1 else 0
end as paychecks_per_year_binned_2_m5
, case when state = 'NV' then 1 else 0 end as State_NV
from mytrain_output;")
mytest_model <- sqldf("select loan_id, leads_3mnf_score, approval_amount
, case when paychecks_per_year > 25 and paychecks_per_year <= 39 then 1 else 0
end as paychecks_per_year_binned_2_m5
, case when state = 'NV' then 1 else 0 end as State_NV
from mytest_output;")
leads_6mnf_fillna <- function(mydata) {
mydata[which(is.na(mydata[,'approval_amount'])),'approval_amount'] <- 250
mydata
}
leads_6mnf <- function(mydata) {
with(mydata,
-5.094  +
leads_3mnf_score               *  1.35476   +
State_NV                        *  39.89301  +
paychecks_per_year_binned_2_m5  *  16.29581  +
approval_amount                 *  0.08085
)
}
mytrain_model <- leads_6mnf_fillna(mytrain_model)
mytest_model <- leads_6mnf_fillna(mytest_model)
mytrain_model$leads_6mnf_score <- leads_6mnf(mytrain_model)
mytest_model$leads_6mnf_score <- leads_6mnf(mytest_model)
model_vars <- c('loan_id', 'leads_3mnf_score', 'State_NV', 'paychecks_per_year_binned_2_m5', 'approval_amount', 'leads_6mnf_score')
mytrain_model <- mytrain_model[,model_vars]
mytest_model <- mytest_model[,model_vars]
names(mytrain_model)[2:5] <- paste('model', names(mytrain_model)[2:5], sep = '__')
names(mytest_model)[2:5] <- paste('model', names(mytest_model)[2:5], sep = '__')
mytrain_final <- mytrain_output %>% left_join(mytrain_model, by='loan_id') # 32508    16
mytest_final <- mytest_output %>% left_join(mytest_model, by='loan_id') # 13929    16
mytrain_final <- mytrain_final[, c(1:5, 7:11, 6, 12)] # 32508    16
mytest_final <- mytest_final[, c(1:5, 7:11, 6, 12)] # 13929    16
write.csv(mytrain_final, '/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/6monthNetFee/Model Governance Data/leads_6mnf_data_train_mg.csv', row.names = F)
write.csv(mytest_final, '/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/6monthNetFee/Model Governance Data/leads_6mnf_data_test_mg.csv', row.names = F)
head(mytrain_model)
head(mytrain_final)
library(dplyr)
library(sqldf)
mytrain <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/12monthNetFee/Training Dataset/m6_lead_12mnf_data_train.csv') # 15588   686
mytest <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/12monthNetFee/Validation Dataset/m6_lead_12mnf_data_test.csv') # 6771  686
nf_6m_train <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/6monthNetFee/Model Governance Data/leads_6mnf_data_train_mg.csv') # 25931    12
nf_6m_test <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/6monthNetFee/Model Governance Data/leads_6mnf_data_test_mg.csv') # 11184    12
profit_score_train <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Profit Model/Model Governance Data/leads_profit_data_train_mg.csv')
profit_score_test <- read.csv('/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Profit Model/Model Governance Data/leads_profit_data_test_mg.csv')
raw_variables <- c('approval_amount',
'cbb_number_of_days_since_last_inquiry',
'ids_idscore',
'income_payment_cd')
mytrain_output <- mytrain[,c('loan_id','customer_id', raw_variables, 'twelve_month_net_fees')] %>%
inner_join(nf_6m_train[,c('loan_id','leads_6mnf_score')]) %>%
inner_join(profit_score_train[,c('loan_id','leads_profit_score')])  # 15375     9
mytest_output <- mytest[,c('loan_id','customer_id', raw_variables, 'twelve_month_net_fees')] %>%
inner_join(nf_6m_test[,c('loan_id','leads_6mnf_score')]) %>%
inner_join(profit_score_test[,c('loan_id','leads_profit_score')])
dim(mytrain_output)
mytrain_model <- sqldf("select loan_id, leads_6mnf_score, leads_profit_score, approval_amount
, (approval_amount*leads_profit_score) as approval_amount_x_leads_profit_score
, case when ids_idscore is null then 0.01488352
when ids_idscore < 357.5 then 0.80447306
when ids_idscore >= 357.5 and ids_idscore < 490.5 then 0.19817173
when ids_idscore >= 490.5 and ids_idscore < 530.5 then -0.12572395
when ids_idscore >= 530.5 and ids_idscore < 596.5 then -0.29653289
when ids_idscore >= 596.5 then -0.51654746
end as ids_idscore_woe_m6
, case when cbb_number_of_days_since_last_inquiry <= 667.5 then 1 else 0
end as cbb_number_of_days_since_last_inquiry_binned_1_m6
, case when income_payment_cd = 'paper_check' then 1 else 0
end as income_payment_cd_b2_m6
from mytrain_output;")
mytest_model <- sqldf("select loan_id, leads_6mnf_score, leads_profit_score, approval_amount
, (approval_amount*leads_profit_score) as approval_amount_x_leads_profit_score
, case when ids_idscore is null then 0.01488352
when ids_idscore < 357.5 then 0.80447306
when ids_idscore >= 357.5 and ids_idscore < 490.5 then 0.19817173
when ids_idscore >= 490.5 and ids_idscore < 530.5 then -0.12572395
when ids_idscore >= 530.5 and ids_idscore < 596.5 then -0.29653289
when ids_idscore >= 596.5 then -0.51654746
end as ids_idscore_woe_m6
, case when cbb_number_of_days_since_last_inquiry <= 667.5 then 1 else 0
end as cbb_number_of_days_since_last_inquiry_binned_1_m6
, case when income_payment_cd = 'paper_check' then 1 else 0
end as income_payment_cd_b2_m6
from mytest_output;")
leads_12mnf_fillna <- function(mydata) {
mydata[which(is.na(mydata[,'approval_amount'])),'approval_amount'] <- 250
mydata
}
leads_12mnf <- function(mydata) {
with(mydata,
42.9723  +
leads_6mnf_score                                   *  1.791     +
ids_idscore_woe_m6                                 *  72.0836   +
cbb_number_of_days_since_last_inquiry_binned_1_m6  *  -37.1365  +
approval_amount * leads_profit_score               *  -0.9358   +
income_payment_cd_b2_m6                            *  -34.3861
)
}
mytrain_model <- leads_12mnf_fillna(mytrain_model)
mytest_model <- leads_12mnf_fillna(mytest_model)
mytrain_model$leads_12mnf_score <- leads_12mnf(mytrain_model)
mytest_model$leads_12mnf_score <- leads_12mnf(mytest_model)
model_vars <- c('loan_id', 'leads_6mnf_score', 'ids_idscore_woe_m6', 'cbb_number_of_days_since_last_inquiry_binned_1_m6'
, 'approval_amount_x_leads_profit_score', 'income_payment_cd_b2_m6', 'leads_12mnf_score')
mytrain_model <- mytrain_model[,model_vars]
mytest_model <- mytest_model[,model_vars]
head(mytrain_model[,c('approval_amount_x_leads_profit_score','approval_amount','leads_profit_score')])
raw_variables <- c('approval_amount',
'cbb_number_of_days_since_last_inquiry',
'ids_idscore',
'income_payment_cd')
mytrain_output <- mytrain[,c('loan_id','customer_id', raw_variables, 'twelve_month_net_fees')] %>%
inner_join(nf_6m_train[,c('loan_id','leads_6mnf_score')]) %>%
inner_join(profit_score_train[,c('loan_id','leads_profit_score')])  # 15375     9
mytest_output <- mytest[,c('loan_id','customer_id', raw_variables, 'twelve_month_net_fees')] %>%
inner_join(nf_6m_test[,c('loan_id','leads_6mnf_score')]) %>%
inner_join(profit_score_test[,c('loan_id','leads_profit_score')])
mytrain_model <- sqldf("select loan_id, leads_6mnf_score, leads_profit_score, approval_amount
, (approval_amount*leads_profit_score) as approval_amount_x_leads_profit_score
, case when ids_idscore is null then 0.01488352
when ids_idscore < 357.5 then 0.80447306
when ids_idscore >= 357.5 and ids_idscore < 490.5 then 0.19817173
when ids_idscore >= 490.5 and ids_idscore < 530.5 then -0.12572395
when ids_idscore >= 530.5 and ids_idscore < 596.5 then -0.29653289
when ids_idscore >= 596.5 then -0.51654746
end as ids_idscore_woe_m6
, case when cbb_number_of_days_since_last_inquiry <= 667.5 then 1 else 0
end as cbb_number_of_days_since_last_inquiry_binned_1_m6
, case when income_payment_cd = 'paper_check' then 1 else 0
end as income_payment_cd_b2_m6
from mytrain_output;")
mytest_model <- sqldf("select loan_id, leads_6mnf_score, leads_profit_score, approval_amount
, (approval_amount*leads_profit_score) as approval_amount_x_leads_profit_score
, case when ids_idscore is null then 0.01488352
when ids_idscore < 357.5 then 0.80447306
when ids_idscore >= 357.5 and ids_idscore < 490.5 then 0.19817173
when ids_idscore >= 490.5 and ids_idscore < 530.5 then -0.12572395
when ids_idscore >= 530.5 and ids_idscore < 596.5 then -0.29653289
when ids_idscore >= 596.5 then -0.51654746
end as ids_idscore_woe_m6
, case when cbb_number_of_days_since_last_inquiry <= 667.5 then 1 else 0
end as cbb_number_of_days_since_last_inquiry_binned_1_m6
, case when income_payment_cd = 'paper_check' then 1 else 0
end as income_payment_cd_b2_m6
from mytest_output;")
leads_12mnf_fillna <- function(mydata) {
mydata[which(is.na(mydata[,'approval_amount'])),'approval_amount'] <- 250
mydata
}
leads_12mnf <- function(mydata) {
with(mydata,
42.9723  +
leads_6mnf_score                                   *  1.791     +
ids_idscore_woe_m6                                 *  72.0836   +
cbb_number_of_days_since_last_inquiry_binned_1_m6  *  -37.1365  +
approval_amount * leads_profit_score               *  -0.9358   +
income_payment_cd_b2_m6                            *  -34.3861
)
}
mytrain_model <- leads_12mnf_fillna(mytrain_model)
mytest_model <- leads_12mnf_fillna(mytest_model)
mytrain_model$leads_12mnf_score <- leads_12mnf(mytrain_model)
mytest_model$leads_12mnf_score <- leads_12mnf(mytest_model)
head(mytrain_model[,c('approval_amount_x_leads_profit_score','approval_amount','leads_profit_score')])
200*0.28224654
model_vars <- c('loan_id', 'leads_6mnf_score', 'ids_idscore_woe_m6', 'cbb_number_of_days_since_last_inquiry_binned_1_m6'
, 'approval_amount_x_leads_profit_score', 'income_payment_cd_b2_m6', 'leads_12mnf_score')
mytrain_model <- mytrain_model[,model_vars]
mytest_model <- mytest_model[,model_vars]
head(mytrain_model)
names(mytrain_model)
names(mytrain_model)[2:6] <- paste('model', names(mytrain_model)[2:6], sep = '__')
names(mytest_model)[2:6] <- paste('model', names(mytest_model)[2:6], sep = '__')
mytrain_final <- mytrain_output %>% left_join(mytrain_model, by='loan_id') # 15375    16
mytest_final <- mytest_output %>% left_join(mytest_model, by='loan_id') # 6671   16
head(mytrain_final)
names(mytrain_final)
mytrain_final <- mytrain_final[, c(1:6, 8:15, 7)] # 15375    15
mytest_final <- mytest_final[, c(1:6, 8:15, 7)] # 6671   15
head()
head(mytest_final)
write.csv(mytrain_final, '/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/12monthNetFee/Model Governance Data/leads_12mnf_data_train_mg.csv', row.names = F)
write.csv(mytest_final, '/Volumes/Scorecard_Development/CNU_US_V11/PDL/Lead Long Term Model/12monthNetFee/Model Governance Data/leads_12mnf_data_test_mg.csv', row.names = F)
# Load text file into local variable called 'data'
data = read.delim(file = '/Users/lli2/Git/Coursera/Foundations_of_Marketing_Analytics/purchases.txt', header = FALSE, sep = '\t', dec = '.')
# Display what has been loaded
head(data)
summary(data)
colnames(data) = c('customer_id', 'purchase_amount', 'date_of_purchase')
head(data)
data$date_of_purchase = as.Date(data$date_of_purchase, "%Y-%m-%d")
data$year_of_purchase = as.numeric(format(data$date_of_purchase, "%Y"))
summary(data)
# Explore the data using simple SQL statements
library(sqldf)
library(dplyr)
x1 = mydata %>%
barplot(x$counter, names.arg = x$year_of_purchase)
# Load text file into local variable called 'mydata'
mydata = read.delim(file = '/Users/lli2/Git/Coursera/Foundations_of_Marketing_Analytics/purchases.txt', header = FALSE, sep = '\t', dec = '.')
# Display what has been loaded
head(mydata)
summary(mydata)
# Add headers and interpret the last column as a date, extract year of purchase
colnames(mydata) = c('customer_id', 'purchase_amount', 'date_of_purchase')
mydata$date_of_purchase = as.Date(mydata$date_of_purchase, "%Y-%m-%d")
mydata$year_of_purchase = as.numeric(format(mydata$date_of_purchase, "%Y"))
# Display the data set after transformation
head(mydata)
summary(mydata)
x1 = mydata %>%
group_by(year_of_purchase) %>%
summarise(counter = n(.))
x1
x1 = mydata %>%
group_by(year_of_purchase) %>%
summarise(counter = n())
x1
barplot(x1$counter, x1$year_of_purchase)
barplot(x1$counter, names.arg =  x1$year_of_purchase)
x2 = mydata %>%
group_by(year_of_purchase) %>%
summarise(avg_amount = avg(purchase_amount))
sum(is.na(mydata$purchase_amount))
x2 = mydata %>%
group_by(year_of_purchase) %>%
summarise(avg_amount = mean(purchase_amount))
barplot(x2$avg_amount, names.arg = x2$year_of_purchase)
x3 = mydata %>%
group_by(year_of_purchase) %>%
summarise(sum_amount = sum(purchase_amount))
barplot(x3$sum_amount, names.arg = x3$year_of_purchase)
setwd("/Users/lli2/Git/Coursera/Foundations_of_Marketing_Analytics")
read.delim
# Load text file into local variable called 'data'
mydata = read.delim(file = 'purchases.txt', header = FALSE, sep = '\t', dec = '.')
# Load text file into local variable called 'data'
mydata = read.delim(file = 'purchases.txt', header = FALSE, sep = '\t', dec = '.')
# Add headers and interpret the last column as a date, extract year of purchase
colnames(mydata) = c('customer_id', 'purchase_amount', 'date_of_purchase')
mydata$date_of_purchase = as.Date(mydata$date_of_purchase, "%Y-%m-%d")
max(date_of_purchase)
max(mydata$date_of_purchase)
max(mydata$date_of_purchase)+1
mydata$days_since = as.numeric(difftime(time1 = max(mydata$date_of_purchase)+1,
time2 = mydata$date_of_purchase,
units = "days"))
# Display the data after transformation
head(mydata)
summary(mydata)
# Compute key marketing indicators using SQL language
library(sqldf)
library(dplyr)
customers = mydata %>%
group_by(customer_id) %>%
summarise(recency = min(days_since),
frequency = n(),
amount = avg(purchase_amount))
customers = mydata %>%
group_by(customer_id) %>%
summarise(recency = min(days_since),
frequency = n(),
amount = mean(purchase_amount)) # The monetary amount is AVERAGE.
# Explore the data
head(customers)
summary(customers)
hist(customers$recency)
hist(customers$frequency)
hist(customers$amount)
hist(customers$amount, breaks = 100)
# Copy customer data into new data frame
new_data = customers
head(new_data)
row.names(new_data) = new_data$customer_id
head(new_data)
head(mydata)
dim(customers)
# Copy customer data into new data frame
new_data = customers
# Remove customer id as a variable, store it as row names
head(new_data)
row.names(new_data) = new_data$customer_id
new_data = as.data.frame(customers)
# Remove customer id as a variable, store it as row names
head(new_data)
row.names(new_data) = new_data$customer_id
new_data$customer_id = NULL
head(new_data)
hist(customers$frequency)
# Take the log-transform of the amount, and plot
new_data$amount = log(new_data$amount)
hist(new_data$amount)
new_data$frequency = log(new_data$frequency)
hist(new_data$frequency)
hist(customers$recency)
# Copy customer data into new data frame
new_data = as.data.frame(customers)
# Remove customer id as a variable, store it as row names
head(new_data)
row.names(new_data) = new_data$customer_id
new_data$customer_id = NULL
head(new_data)
# Take the log-transform of the amount, and plot
new_data$amount = log(new_data$amount)
hist(new_data$amount)
scale
# Standardize variables
new_data = scale(new_data)  # scale is doing z-score standarization
head(new_data)
hist(new_data$recency)
head(new_data)
class(new_data)
# Take a 10% sample
sample = seq(1, 18417, by = 10)
head(sample)
customers_sample = customers[sample, ]
new_data_sample  = new_data[sample, ]
dist
head(customers_sample[, 2:4])
mtcars
# Perform hierarchical clustering on distance metrics
c = hclust(d, method="ward.D2")
# Compute distance metrics on standardized data
d = dist(new_data_sample)
# compute the distance matrix for each pair of cases in the data set, usually after data transformation (e.g. scale, log,...)
# set row.names before using the function
# default distance is Euclidean Distance
# other types: maximum, Manhattan, Canberra, binary, Minkowski
# Perform hierarchical clustering on distance metrics
c = hclust(d, method="ward.D2")
# Plot de dendogram
plot(c)
# Cut at 9 segments
members = cutree(c, k = 9)
# Show 30 first customers, frequency table
members[1:30]
table(members)
# Show profile of each segment
aggregate(customers_sample[, 2:4], by = list(members), mean)
# Copy customer data into new data frame
new_data = as.data.frame(customers)
# Remove customer id as a variable, store it as row names
head(new_data)
row.names(new_data) = new_data$customer_id
new_data$customer_id = NULL
head(new_data)
# Copy customer data into new data frame
new_data = as.data.frame(customers)
# Remove customer id as a variable, store it as row names
head(new_data)
row.names(new_data) = new_data$customer_id
new_data$customer_id = NULL
head(new_data)
# Take the log-transform of the amount, and plot
new_data$frequency = log(new_data$frequency)
new_data$amount = log(new_data$amount)
hist(new_data$frequency)
hist(new_data$amount)
# Standardize variables
new_data = scale(new_data)  # scale is doing z-score standarization
head(new_data) # after "scale", this is a matrix.
# Compute distance metrics on standardized data
# This will likely generate an error on most machines
# d = dist(new_data)
# Take a 10% sample
sample = seq(1, 18417, by = 10)
head(sample)
customers_sample = customers[sample, ]
new_data_sample  = new_data[sample, ]
# Compute distance metrics on standardized data
d = dist(new_data_sample)
# compute the distance matrix for each pair of cases in the data set, usually after data transformation (e.g. scale, log,...)
# set row.names before using the function
# default distance is Euclidean Distance
# other types: maximum, Manhattan, Canberra, binary, Minkowski
# Perform hierarchical clustering on distance metrics
c = hclust(d, method="ward.D2")
# Plot de dendogram
plot(c)
# Cut at 9 segments
members = cutree(c, k = 5)
# Show 30 first customers, frequency table
members[1:30]
table(members)
# Show profile of each segment
aggregate(customers_sample[, 2:4], by = list(members), mean)
cluster_mean[order(recency),]
cluster_mean = aggregate(customers_sample[, 2:4], by = list(members), mean)
cluster_mean[order(recency),]
class(cluster_mean)
cluster_mean[order(cluster_mean$recency),]
members[1:30]
